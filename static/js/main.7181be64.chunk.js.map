{"version":3,"sources":["components/emojis.js","components/EmojiBtn.js","components/Mood.js","components/EmojiGrid.js","components/EmojiTracker.js","App.js","index.js"],"names":["emojis","name","secondary","type","level","emoji","EmojiBtn","setCurrentEmoji","id","className","onClick","Mood","currentEmoji","EmojiGrid","renderEmojiBtns","map","index","Col","sm","md","lg","Card","Container","Row","EmojiTracker","useState","posts","setPosts","fetchSavedPosts","savedPosts","localStorage","getItem","JSON","parse","useEffect","updatedPosts","createdAt","Date","_id","uuidv4","setItem","stringify","savePost","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7181be64.chunk.js","sourcesContent":["// need to research passing props to render each emoji with props and then have that data passed to the server on click\n\nconst emojis = [\n  {\n    name: 'afraid',\n    secondary: '',\n    type: 'afraid',\n    level: 1,\n    emoji: '😓',\n  },\n  {\n    name: 'angry',\n    secondary: '',\n    type: 'angry',\n    level: 1,\n    emoji: '😡',\n  },\n  {\n    name: 'annoyed',\n    secondary: 'frustrated',\n    type: 'angry',\n    level: 3,\n    emoji: '🙄',\n  },\n  {\n    name: 'anxious',\n    secondary: '',\n    type: 'fearful',\n    level: 2,\n    emoji: '😣',\n  },\n  {\n    name: 'bored',\n    secondary: '',\n    type: 'bad',\n    level: 2,\n    emoji: '😑',\n  },\n  {\n    name: 'calm',\n    secondary: '',\n    type: 'happy',\n    level: 2,\n    emoji: '😌',\n  },\n\n  {\n    name: 'confused',\n    secondary: '',\n    type: 'surprised',\n    level: 2,\n    emoji: '🤔',\n  },\n  {\n    name: 'crazy',\n    secondary: 'excited',\n    type: 'surprised',\n    level: 3,\n    emoji: '🤪',\n  },\n  {\n    name: 'disgusted',\n    secondary: '',\n    type: 'disgusted',\n    level: 1,\n    emoji: '😒',\n  },\n  {\n    name: 'embarrassed',\n    secondary: 'disapproving',\n    type: 'disgusted',\n    level: 3,\n    emoji: '😅',\n  },\n  {\n    name: 'excited',\n    secondary: '',\n    type: 'surprised',\n    level: 2,\n    emoji: '😆',\n  },\n  {\n    name: 'happy',\n    secondary: '',\n    type: 'happy',\n    level: 1,\n    emoji: '🙂',\n  },\n\n  {\n    name: 'lonely',\n    secondary: '',\n    type: 'sad',\n    level: 2,\n    emoji: '😔',\n  },\n  {\n    name: 'nostalgic',\n    secondary: 'peaceful',\n    type: 'happy',\n    level: 3,\n    emoji: '🥲',\n  },\n  {\n    name: 'numb',\n    secondary: 'distant',\n    type: 'angry',\n    level: 3,\n    emoji: '😐',\n  },\n  {\n    name: 'optimistic',\n    secondary: '',\n    type: 'happy',\n    level: 2,\n    emoji: '😃',\n  },\n  {\n    name: 'proud',\n    secondary: '',\n    type: 'happy',\n    level: 2,\n    emoji: '😎',\n  },\n  {\n    name: 'sad',\n    secondary: '',\n    type: 'sad',\n    level: 1,\n    emoji: '🙁',\n  },\n\n  {\n    name: 'sick',\n    secondary: 'awful',\n    type: 'disgusted',\n    level: 3,\n    emoji: '🤢',\n  },\n  {\n    name: 'silly',\n    secondary: 'playful',\n    type: 'happy',\n    level: 3,\n    emoji: '🤡',\n  },\n  {\n    name: 'sleepy',\n    secondary: 'tired',\n    type: 'bad',\n    level: 3,\n    emoji: '😴',\n  },\n  {\n    name: 'stressed',\n    secondary: '',\n    type: 'bad',\n    level: 2,\n    emoji: '😤',\n  },\n  {\n    name: 'surprised',\n    secondary: '',\n    type: 'surprised',\n    level: 3,\n    emoji: '😮',\n  },\n  {\n    name: 'tired',\n    secondary: '',\n    type: 'bad',\n    level: 2,\n    emoji: '🥱',\n  },\n]; // emojis\n\nexport default emojis;\n","import React from 'react';\n// Props will get passed in from the grid component as an array of objects. This will then be deconstructed and used to render the emoji.\nconst EmojiBtn = ({ emoji, setCurrentEmoji }) => {\n  return (\n    <div\n      id={emoji.name}\n      name={emoji.name}\n      className='emoji-btn'\n      // Change this click event to display a modal with the option to add details and submit btn.\n      onClick={() => {\n        setCurrentEmoji(emoji);\n      }}\n    >\n      <h1 className='emoji'>{emoji.emoji}</h1>\n      <p className='emoji-name text-uppercase'>{emoji.name}</p>\n    </div>\n  );\n};\n\nexport default EmojiBtn;\n","import React from 'react';\n// Idea: To show the most recent mood immediately without waiting for the db as delays may cause the user to make multiple clicks?\n\nconst Mood = ({ currentEmoji }) => {\n  return currentEmoji ? (\n    <div className='title centered'>\n      <h1>\n        Today I feel {currentEmoji.name} {currentEmoji.emoji}\n      </h1>\n    </div>\n  ) : (\n    <div className='title centered'>\n      <h1>Today I feel...</h1>\n    </div>\n  );\n};\n\nexport default Mood;\n","import React from 'react';\nimport emojis from './emojis';\nimport EmojiBtn from './EmojiBtn';\nimport Mood from './Mood';\nimport { Container, Card, Col, Row } from 'react-bootstrap';\n\nconst EmojiGrid = ({ currentEmoji, setCurrentEmoji }) => {\n  const renderEmojiBtns = emojis.map((emoji, index) => {\n    return (\n      <Col key={index} sm={6} md={4} lg={2}>\n        <EmojiBtn key={index} emoji={emoji} setCurrentEmoji={setCurrentEmoji} />\n      </Col>\n    );\n  });\n\n  return (\n    <Card>\n      <Container>\n        <br />\n        <Row>\n          <Mood currentEmoji={currentEmoji} />\n        </Row>\n        <br />\n        <Row>{renderEmojiBtns}</Row>\n      </Container>\n    </Card>\n  );\n};\n\nexport default EmojiGrid;\n","import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport EmojiGrid from './EmojiGrid';\n// import UserPosts from './UserPosts';\nimport { Container } from 'react-bootstrap';\nimport '../styles/index.css';\n\nconst EmojiTracker = () => {\n  const [posts, setPosts] = useState([]);\n  const [currentEmoji, setCurrentEmoji] = useState(null);\n  // GET ROUTE\n  const fetchSavedPosts = () => {\n    const savedPosts = localStorage.getItem('emoji-tracker');\n    if (!savedPosts) {\n      return;\n    }\n    setPosts(JSON.parse(savedPosts));\n  };\n  // POST ROUTE\n  const savePost = () => {\n    const newPost = {\n      createdAt: new Date(),\n      _id: uuidv4(),\n      name: currentEmoji.name,\n      secondary: currentEmoji.secondary,\n      type: currentEmoji.type,\n      level: currentEmoji.level,\n      emoji: currentEmoji.emoji,\n    };\n    const updatedPosts = [newPost, ...posts];\n    localStorage.setItem('emoji-tracker', JSON.stringify(updatedPosts));\n    fetchSavedPosts();\n  };\n\n  // Fetch posts and set to state on mount\n  useEffect(() => {\n    fetchSavedPosts();\n  }, []);\n  // Capture post data, set to state and save to local storage on change\n  useEffect(() => {\n    if (currentEmoji) {\n      savePost();\n    }\n    return;\n  }, [currentEmoji]);\n\n  return (\n    <Container>\n      <EmojiGrid\n        currentEmoji={currentEmoji}\n        setCurrentEmoji={setCurrentEmoji}\n      />\n      {/* <UserPosts posts={posts} /> */}\n    </Container>\n  );\n};\n\nexport default EmojiTracker;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport EmojiTracker from './components/EmojiTracker';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Router>\n        <Switch>\n          <Route path='/' exact component={EmojiTracker} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { Provider } from 'react-redux';\n// import { createStore, applyMiddleware, compose } from 'redux';\n// import thunk from 'redux-thunk';\n// import reducers from './reducers';\nimport App from './App';\n\n// const store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}