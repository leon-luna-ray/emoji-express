{"version":3,"sources":["components/emojis.js","components/EmojiBtn.js","components/Header.js","components/EmojiGrid.js","components/UserPosts.js","hooks/useEventListener.js","hooks/useMediaQuery.js","hooks/useStorage.js","hooks/useDarkMode.js","components/DarkModeBtn.js","components/EmojiTracker.js","App.js","index.js"],"names":["emojis","name","secondary","type","level","emoji","EmojiBtn","setCurrentEmoji","id","className","onClick","Header","currentEmoji","EmojiGrid","renderEmojiBtns","map","index","Col","xs","md","lg","Row","UserPosts","posts","console","log","post","Card","createdAt","useEventListener","eventType","callback","element","window","callbackRef","useRef","useEffect","current","handler","e","addEventListener","removeEventListener","useMediaQuery","mediaQuery","useState","isMatch","setIsMatch","mediaQueryList","setMediaQueryList","list","matchMedia","matches","useStorage","key","defaultValue","storageObject","jsonValue","getItem","JSON","parse","initialValue","value","setValue","undefined","removeItem","setItem","stringify","remove","useCallback","useDarkMode","localStorage","darkMode","setDarkMode","prefersDarkMode","enabled","document","body","classList","toggle","DarkModeBtn","prevDarkMode","style","background","color","EmojiTracker","setPosts","fetchSavedPosts","savedPosts","updatedPosts","Date","_id","uuidv4","savePost","Container","App","path","exact","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2dd06fac.chunk.js","sourcesContent":["// need to research passing props to render each emoji with props and then have that data passed to the server on click\n\nconst emojis = [\n  {\n    name: 'afraid',\n    secondary: '',\n    type: 'afraid',\n    level: 1,\n    emoji: '😓',\n  },\n  {\n    name: 'angry',\n    secondary: '',\n    type: 'angry',\n    level: 1,\n    emoji: '😡',\n  },\n  {\n    name: 'annoyed',\n    secondary: 'frustrated',\n    type: 'angry',\n    level: 3,\n    emoji: '🙄',\n  },\n  {\n    name: 'anxious',\n    secondary: '',\n    type: 'fearful',\n    level: 2,\n    emoji: '😣',\n  },\n  {\n    name: 'bored',\n    secondary: '',\n    type: 'bad',\n    level: 2,\n    emoji: '😑',\n  },\n  {\n    name: 'calm',\n    secondary: '',\n    type: 'happy',\n    level: 2,\n    emoji: '😌',\n  },\n\n  {\n    name: 'confused',\n    secondary: '',\n    type: 'surprised',\n    level: 2,\n    emoji: '🤔',\n  },\n  {\n    name: 'crazy',\n    secondary: 'excited',\n    type: 'surprised',\n    level: 3,\n    emoji: '🤪',\n  },\n  {\n    name: 'disgusted',\n    secondary: '',\n    type: 'disgusted',\n    level: 1,\n    emoji: '😒',\n  },\n  {\n    name: 'embarrassed',\n    secondary: 'disapproving',\n    type: 'disgusted',\n    level: 3,\n    emoji: '😅',\n  },\n  {\n    name: 'excited',\n    secondary: '',\n    type: 'surprised',\n    level: 2,\n    emoji: '😆',\n  },\n  {\n    name: 'happy',\n    secondary: '',\n    type: 'happy',\n    level: 1,\n    emoji: '🙂',\n  },\n\n  {\n    name: 'lonely',\n    secondary: '',\n    type: 'sad',\n    level: 2,\n    emoji: '😔',\n  },\n  {\n    name: 'nostalgic',\n    secondary: 'peaceful',\n    type: 'happy',\n    level: 3,\n    emoji: '🥲',\n  },\n  {\n    name: 'numb',\n    secondary: 'distant',\n    type: 'angry',\n    level: 3,\n    emoji: '😐',\n  },\n  {\n    name: 'optimistic',\n    secondary: '',\n    type: 'happy',\n    level: 2,\n    emoji: '😃',\n  },\n  {\n    name: 'proud',\n    secondary: '',\n    type: 'happy',\n    level: 2,\n    emoji: '😎',\n  },\n  {\n    name: 'sad',\n    secondary: '',\n    type: 'sad',\n    level: 1,\n    emoji: '🙁',\n  },\n\n  {\n    name: 'sick',\n    secondary: 'awful',\n    type: 'disgusted',\n    level: 3,\n    emoji: '🤢',\n  },\n  {\n    name: 'silly',\n    secondary: 'playful',\n    type: 'happy',\n    level: 3,\n    emoji: '🤡',\n  },\n  {\n    name: 'sleepy',\n    secondary: 'tired',\n    type: 'bad',\n    level: 3,\n    emoji: '😴',\n  },\n  {\n    name: 'stressed',\n    secondary: '',\n    type: 'bad',\n    level: 2,\n    emoji: '😤',\n  },\n  {\n    name: 'surprised',\n    secondary: '',\n    type: 'surprised',\n    level: 3,\n    emoji: '😮',\n  },\n  {\n    name: 'tired',\n    secondary: '',\n    type: 'bad',\n    level: 2,\n    emoji: '🥱',\n  },\n]; // emojis\n\nexport default emojis;\n","import React from 'react';\n// Props will get passed in from the grid component as an array of objects. This will then be deconstructed and used to render the emoji.\nconst EmojiBtn = ({ emoji, setCurrentEmoji }) => {\n  return (\n    <div\n      id={emoji.name}\n      name={emoji.name}\n      className='emoji-btn'\n      // Change this click event to display a modal with the option to add details and submit btn.\n      onClick={() => {\n        setCurrentEmoji(emoji);\n      }}\n    >\n      <h1 className='emoji'>{emoji.emoji}</h1>\n      <p className='emoji-name text-uppercase'>{emoji.name}</p>\n    </div>\n  );\n};\n\nexport default EmojiBtn;\n","import React from 'react';\n// Idea: To show the most recent mood immediately without waiting for the db as delays may cause the user to make multiple clicks?\n\nconst Header = ({ currentEmoji }) => {\n  return currentEmoji ? (\n    <div className='title centered'>\n      <h1>\n        Today I feel {currentEmoji.name} {currentEmoji.emoji}\n      </h1>\n    </div>\n  ) : (\n    <div className='title centered'>\n      <h1>Today I feel...</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport emojis from './emojis';\nimport EmojiBtn from './EmojiBtn';\nimport Header from './Header';\nimport { Card, Col, Row } from 'react-bootstrap';\n\nconst EmojiGrid = ({ currentEmoji, setCurrentEmoji }) => {\n  const renderEmojiBtns = emojis.map((emoji, index) => {\n    return (\n      <Col key={index} xs={4} md={3} lg={2}>\n        <EmojiBtn key={index} emoji={emoji} setCurrentEmoji={setCurrentEmoji} />\n      </Col>\n    );\n  });\n\n  return (\n    <div>\n      <br />\n      <Row>\n        <Header currentEmoji={currentEmoji} />\n      </Row>\n      <br />\n      <Row>{renderEmojiBtns}</Row>\n    </div>\n  );\n};\n\nexport default EmojiGrid;\n","import React from 'react';\nimport { Card, Col } from 'react-bootstrap';\n\nconst UserPosts = ({ posts }) => {\n  const renderedPosts = () => {\n    console.log(posts);\n    posts.map((post, index) => {\n      return (\n        <Col xs={4} md={3} lg={2}>\n          <Card key={index} className='text-center'>\n            <h1> {post.emoji}</h1>\n            <p className='post-title'>{post.name}</p>\n            <p className='post-subtext'>{post.createdAt}</p>\n          </Card>\n        </Col>\n      );\n    });\n  };\n  return renderedPosts;\n};\n\nexport default UserPosts;\n","import { useEffect, useRef } from 'react';\n\nconst useEventListener = (eventType, callback, element = window) => {\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (element == null) return;\n    const handler = (e) => callbackRef.current(e);\n    element.addEventListener(eventType, handler);\n\n    return () => element.removeEventListener(eventType, handler);\n  }, [eventType, element]);\n};\n\nexport default useEventListener;\n","import { useState, useEffect } from 'react';\nimport useEventListener from './useEventListener';\n\nconst useMediaQuery = (mediaQuery) => {\n  const [isMatch, setIsMatch] = useState(false);\n  const [mediaQueryList, setMediaQueryList] = useState(null);\n\n  useEffect(() => {\n    const list = window.matchMedia(mediaQuery);\n    setMediaQueryList(list);\n    setIsMatch(list.matches);\n  }, [mediaQuery]);\n\n  useEventListener('change', (e) => setIsMatch(e.matches), mediaQueryList);\n\n  return isMatch;\n};\n\nexport default useMediaQuery;\n","import { useCallback, useState, useEffect } from 'react';\n\nexport function useLocalStorage(key, defaultValue) {\n  return useStorage(key, defaultValue, window.localStorage);\n}\n\nexport function useSessionStorage(key, defaultValue) {\n  return useStorage(key, defaultValue, window.sessionStorage);\n}\n\nfunction useStorage(key, defaultValue, storageObject) {\n  const [value, setValue] = useState(() => {\n    const jsonValue = storageObject.getItem(key);\n    if (jsonValue != null) return JSON.parse(jsonValue);\n\n    if (typeof initialValue === 'function') {\n      return defaultValue();\n    } else {\n      return defaultValue;\n    }\n  });\n\n  useEffect(() => {\n    if (value === undefined) return storageObject.removeItem(key);\n    storageObject.setItem(key, JSON.stringify(value));\n  }, [key, value, storageObject]);\n\n  const remove = useCallback(() => {\n    setValue(undefined);\n  }, []);\n\n  return [value, setValue, remove];\n}\n","import { useEffect } from 'react';\nimport useMediaQuery from './useMediaQuery';\nimport { useLocalStorage } from './useStorage';\nconst useDarkMode = () => {\n  const [darkMode, setDarkMode] = useLocalStorage('useDarkMode');\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const enabled = darkMode || prefersDarkMode;\n\n  useEffect(() => {\n    document.body.classList.toggle('dark-mode', enabled);\n  }, [enabled]);\n\n  return [enabled, setDarkMode];\n};\n\nexport default useDarkMode;\n","import React from 'react';\nimport useDarkMode from '../hooks/useDarkMode';\n\nconst DarkModeBtn = () => {\n  const [darkMode, setDarkMode] = useDarkMode();\n\n  return (\n    <div\n      className='dark-mode-btn'\n      onClick={() => setDarkMode((prevDarkMode) => !prevDarkMode)}\n      style={{\n        background: darkMode ? '#333' : '#fff',\n        color: darkMode ? 'white' : 'black',\n      }}\n    >\n      {darkMode ? 'Light ⬜️' : 'Dark ⬛️'}\n    </div>\n  );\n};\n\nexport default DarkModeBtn;\n","import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport EmojiGrid from './EmojiGrid';\nimport UserPosts from './UserPosts';\nimport DarkModeBtn from './DarkModeBtn';\nimport '../styles/index.css';\n\nconst EmojiTracker = () => {\n  const [posts, setPosts] = useState([]);\n  const [currentEmoji, setCurrentEmoji] = useState(null);\n\n  // GET ROUTE\n  const fetchSavedPosts = () => {\n    const savedPosts = localStorage.getItem('emoji-tracker');\n    if (!savedPosts) {\n      return;\n    }\n    setPosts(JSON.parse(savedPosts));\n    // console.log(posts);\n  };\n\n  // POST ROUTE\n  const savePost = () => {\n    const newPost = {\n      createdAt: new Date(),\n      _id: uuidv4(),\n      name: currentEmoji.name,\n      secondary: currentEmoji.secondary,\n      type: currentEmoji.type,\n      level: currentEmoji.level,\n      emoji: currentEmoji.emoji,\n    };\n    const updatedPosts = [newPost, ...posts];\n    localStorage.setItem('emoji-tracker', JSON.stringify(updatedPosts));\n\n    fetchSavedPosts();\n  };\n\n  // Fetch posts and set to state on mount\n  useEffect(() => {\n    fetchSavedPosts();\n  }, []);\n\n  // Capture post data, set to state and save to local storage on change\n  useEffect(() => {\n    if (currentEmoji) {\n      savePost();\n    }\n    return;\n  }, [currentEmoji]);\n\n  return (\n    <Container>\n      <Row>\n        <Col className='d-flex justify-content-end'>\n          <DarkModeBtn />\n        </Col>\n      </Row>\n      <Row>\n        <EmojiGrid\n          currentEmoji={currentEmoji}\n          setCurrentEmoji={setCurrentEmoji}\n        />\n      </Row>\n      <br />\n      <br />\n      <Row>\n        <UserPosts posts={posts} />\n      </Row>\n    </Container>\n  );\n};\n\nexport default EmojiTracker;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport EmojiTracker from './components/EmojiTracker';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Router>\n        <Switch>\n          <Route path='/' exact component={EmojiTracker} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { Provider } from 'react-redux';\n// import { createStore, applyMiddleware, compose } from 'redux';\n// import thunk from 'redux-thunk';\n// import reducers from './reducers';\nimport App from './App';\n\n// const store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}