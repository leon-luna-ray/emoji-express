{"version":3,"sources":["reducers/emojiPosts.js","reducers/index.js","components/emojis.js","components/EmojiBtn.js","components/Mood.js","components/EmojiGrid.js","components/EmojiTracker.js","App.js","index.js"],"names":["reducer","posts","action","type","payload","combineReducers","emojis","name","secondary","level","emoji","EmojiBtn","setUserEmoji","id","className","onClick","Mood","userEmoji","EmojiGrid","emojiBtns","map","index","Col","sm","md","lg","Card","Container","Row","EmojiTracker","useState","post","setPost","JSON","parse","localStorage","getItem","setPosts","saveToLocalStorage","savedPosts","fetchSavedPosts","setItem","stringify","useEffect","createdAt","Date","_id","uuidv4","App","path","exact","component","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec3c9685.chunk.js","sourcesContent":["// the first argument posts is the initial state\nconst reducer = (posts = [], action) => {\n  switch (action.type) {\n    // payload is coming from the posts action\n    case 'FETCH_ALL':\n      return action.payload;\n    // spread posts, add the new one to the array and update state\n    case 'CREATE':\n      return [...posts, action.payload];\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport posts from './emojiPosts';\n\nexport default combineReducers({ posts });\n","// need to research passing props to render each emoji with props and then have that data passed to the server on click\n\nconst emojis = [\n  {\n    name: 'afraid',\n    secondary: '',\n    type: 'afraid',\n    level: 1,\n    emoji: '😓',\n  },\n  {\n    name: 'angry',\n    secondary: '',\n    type: 'angry',\n    level: 1,\n    emoji: '😡',\n  },\n  {\n    name: 'annoyed',\n    secondary: 'frustrated',\n    type: 'angry',\n    level: 3,\n    emoji: '🙄',\n  },\n  {\n    name: 'anxious',\n    secondary: '',\n    type: 'fearful',\n    level: 2,\n    emoji: '😣',\n  },\n  {\n    name: 'bored',\n    secondary: '',\n    type: 'bad',\n    level: 2,\n    emoji: '😑',\n  },\n  {\n    name: 'calm',\n    secondary: '',\n    type: 'happy',\n    level: 2,\n    emoji: '😌',\n  },\n\n  {\n    name: 'confused',\n    secondary: '',\n    type: 'surprised',\n    level: 2,\n    emoji: '🤔',\n  },\n  {\n    name: 'crazy',\n    secondary: 'excited',\n    type: 'surprised',\n    level: 3,\n    emoji: '🤪',\n  },\n  {\n    name: 'disgusted',\n    secondary: '',\n    type: 'disgusted',\n    level: 1,\n    emoji: '😒',\n  },\n  {\n    name: 'embarrassed',\n    secondary: 'disapproving',\n    type: 'disgusted',\n    level: 3,\n    emoji: '😅',\n  },\n  {\n    name: 'excited',\n    secondary: '',\n    type: 'surprised',\n    level: 2,\n    emoji: '😆',\n  },\n  {\n    name: 'happy',\n    secondary: '',\n    type: 'happy',\n    level: 1,\n    emoji: '🙂',\n  },\n\n  {\n    name: 'lonely',\n    secondary: '',\n    type: 'sad',\n    level: 2,\n    emoji: '😔',\n  },\n  {\n    name: 'nostalgic',\n    secondary: 'peaceful',\n    type: 'happy',\n    level: 3,\n    emoji: '🥲',\n  },\n  {\n    name: 'numb',\n    secondary: 'distant',\n    type: 'angry',\n    level: 3,\n    emoji: '😐',\n  },\n  {\n    name: 'optimistic',\n    secondary: '',\n    type: 'happy',\n    level: 2,\n    emoji: '😃',\n  },\n  {\n    name: 'proud',\n    secondary: '',\n    type: 'happy',\n    level: 2,\n    emoji: '😎',\n  },\n  {\n    name: 'sad',\n    secondary: '',\n    type: 'sad',\n    level: 1,\n    emoji: '🙁',\n  },\n\n  {\n    name: 'sick',\n    secondary: 'awful',\n    type: 'disgusted',\n    level: 3,\n    emoji: '🤢',\n  },\n  {\n    name: 'silly',\n    secondary: 'playful',\n    type: 'happy',\n    level: 3,\n    emoji: '🤡',\n  },\n  {\n    name: 'sleepy',\n    secondary: 'tired',\n    type: 'bad',\n    level: 3,\n    emoji: '😴',\n  },\n  {\n    name: 'stressed',\n    secondary: '',\n    type: 'bad',\n    level: 2,\n    emoji: '😤',\n  },\n  {\n    name: 'surprised',\n    secondary: '',\n    type: 'surprised',\n    level: 3,\n    emoji: '😮',\n  },\n  {\n    name: 'tired',\n    secondary: '',\n    type: 'bad',\n    level: 2,\n    emoji: '🥱',\n  },\n]; // emojis\n\nexport default emojis;\n","import React from 'react';\n// Props will get passed in from the grid component as an array of objects. This will then be deconstructed and used to render the emoji.\nconst EmojiBtn = ({ emoji, setUserEmoji }) => {\n  return (\n    <div\n      id={emoji.name}\n      name={emoji.name}\n      className='emoji-btn'\n      // Change this click event to display a modal with the option to add details and submit btn.\n      onClick={() => {\n        setUserEmoji(emoji);\n      }}\n    >\n      <h1 className='emoji'>{emoji.emoji}</h1>\n      <p className='emoji-name text-uppercase'>{emoji.name}</p>\n    </div>\n  );\n};\n\nexport default EmojiBtn;\n","import React from 'react';\n// Idea: To show the most recent mood immediately without waiting for the db as delays may cause the user to make multiple clicks?\n\nconst Mood = ({ userEmoji }) => {\n  return userEmoji ? (\n    <div className='title centered'>\n      <h1>\n        Today I feel {userEmoji.name} {userEmoji.emoji}\n      </h1>\n    </div>\n  ) : (\n    <div className='title centered'>\n      <h1>Today I feel...</h1>\n    </div>\n  );\n};\n\nexport default Mood;\n","import React from 'react';\nimport emojis from './emojis';\nimport EmojiBtn from './EmojiBtn';\nimport Mood from './Mood';\nimport { Container, Card, Col, Row } from 'react-bootstrap';\n\nconst EmojiGrid = ({ userEmoji, setUserEmoji }) => {\n  const emojiBtns = emojis.map((emoji, index) => {\n    return (\n      <Col sm={6} md={4} lg={2}>\n        <EmojiBtn key={index} emoji={emoji} setUserEmoji={setUserEmoji} />\n      </Col>\n    );\n  });\n\n  return (\n    <Card>\n      <Container>\n        <br />\n        <Row>\n          <Mood userEmoji={userEmoji} />\n        </Row>\n        <br />\n        <Row>{emojiBtns}</Row>\n      </Container>\n    </Card>\n  );\n};\n\nexport default EmojiGrid;\n","import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport EmojiGrid from './EmojiGrid';\nimport UserPosts from './UserPosts';\nimport { Container } from 'react-bootstrap';\nimport './index.css';\n\nconst EmojiTracker = () => {\n  const [post, setPost] = useState(null);\n  const [posts, setPosts] = useState(\n    JSON.parse(localStorage.getItem('emoji-tracker'))\n  );\n  const [userEmoji, setUserEmoji] = useState(null);\n\n  const fetchSavedPosts = () => {\n    let posts = JSON.parse(localStorage.getItem('emoji-tracker'));\n    if (!posts) {\n      posts = [];\n      return posts;\n    }\n    return posts;\n    // if there are return the array and parse\n  };\n\n  const saveToLocalStorage = () => {\n    if (!post) return;\n\n    const savedPosts = fetchSavedPosts();\n    localStorage.setItem(\n      'emoji-tracker',\n      JSON.stringify([post, ...savedPosts])\n    );\n    setPosts(JSON.parse(localStorage.getItem('emoji-tracker')));\n  };\n\n  // Capture post data and set to state on user click\n  useEffect(() => {\n    if (!userEmoji) return;\n    setPost({\n      createdAt: new Date(),\n      _id: uuidv4(),\n      name: userEmoji.name,\n      secondary: userEmoji.secondary,\n      type: userEmoji.type,\n      level: userEmoji.level,\n      emoji: userEmoji.emoji,\n    });\n    saveToLocalStorage();\n  }, [userEmoji]);\n\n  return (\n    <Container>\n      <EmojiGrid userEmoji={userEmoji} setUserEmoji={setUserEmoji} />\n      {/* <UserPosts posts={posts} /> */}\n    </Container>\n  );\n};\n\nexport default EmojiTracker;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport EmojiTracker from './components/EmojiTracker';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Router>\n        <Switch>\n          <Route path='/' exact component={EmojiTracker} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\nimport App from './App';\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}